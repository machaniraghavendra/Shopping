package com.shop.life.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.shop.life.entity.UserEntity;
import com.shop.life.exception.UserAlreadyExistsException;
import com.shop.life.exception.UserNotFoundException;
import com.shop.life.repo.UserRepo;

@Service
public class UserServiceImpl implements UserService{

	@Autowired
	UserRepo userRepo;

	@Override
	public String save(UserEntity userEntity) throws UserAlreadyExistsException{
		try {
			if(userRepo.existsById(userEntity.getUserName())||userRepo.existsById(userEntity.getUserEmail()))
			{
				throw new UserAlreadyExistsException("The user already exists with " +userEntity.getUserName());
			}
			else {
				userRepo.save(userEntity);
				return "You are signed-up with "+userEntity.getUserName();
			}
		} catch (UserAlreadyExistsException e) {
			e.printStackTrace();
		}
		return "The user already exists with " +userEntity.getUserName();
	}

	@Override
	public UserEntity find(String username) throws UserNotFoundException {
		try {
			if(userRepo.existsById(username))
			{
				return userRepo.findById(username).get();
			}
			else {
				throw new UserNotFoundException("The user "+username+" does not exists");
			}
		} catch (UserNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<UserEntity> findall() {
		return userRepo.findAll();
	}

	@Override
	public String delete(String username) throws UserNotFoundException{
		try {
			if (!userRepo.existsById(username)) {
				throw new UserNotFoundException("The user "+username+" does not exists");
			}else {
				userRepo.deleteById(username);
				return "The profile has beed deleted with username "+username; 
			}
		} catch (UserNotFoundException e) {
			e.printStackTrace();
		}
		return "The user "+username+" does not exists";
	}

	@Override
	public String update(UserEntity userEntity)  throws UserNotFoundException{
		try {
			if(!(userRepo.existsById(userEntity.getUserName())||userRepo.existsById(userEntity.getUserEmail())))
			{
				throw new UserNotFoundException("The user "+userEntity.getUserEmail()+" does not exists");
			}
			else {
				userRepo.save(userEntity);
				return "You are profile has been updated with "+userEntity.getUserName();
			}
		} catch (UserNotFoundException e) {
			e.printStackTrace();
		}
		return "The user with email  "+userEntity.getUserEmail()+" does not exists";
	}

	@Override
	public boolean check(String userName, String Password) {
		UserEntity user=new UserEntity();
		if(userRepo.existsById(userName))
		{
			user=userRepo.findById(userName).get();
			
			if(user.getUserPassword().equals(Password)) {
				System.out.println(user.toString());
				return true;
			}
		}
		return false;
	}
}
